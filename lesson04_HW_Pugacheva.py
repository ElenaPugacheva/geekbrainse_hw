'''
1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
В расчете необходимо использовать формулу: (выработка в часах*ставка в час) + премия.
Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.'''

import sys
from lesson01.geekbrainse_hw import my_selary
try:
    file, user,  selary, work_hour, premium = sys.argv
except ValueError:
    print("Invalid args")
    exit()
#user, selary, work_hour, premium = input("Введите имя работника: "), input("Введите значение ставки за час: "), input("Введите количество отработанных часов: "), input("Введите значение премии: ")
my_selary.hello(user)
print(f"Ваша зарплата рана: {my_selary.calculate(int(selary),int(work_hour), int(premium))}")

'''
2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123].
'''

import random
my_list = [random.randint(1, 300) for el in range(1, 15)]
new_list = []
print(f"Исходый список: {my_list}")
for i in range(0, len(my_list)):
    a = my_list[i]
    if a != my_list[0] and a > my_list[i-1]:
        new_list.append(my_list[i])
print(f"Результат значение следующего больше предидущего: {new_list}")



''' 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
Подсказка: использовать функцию range() и генератор.'''

print([x for x in range(20, 241) if x % 20 == 0 or x % 21 == 0])

'''
4. Представлен список чисел. Определить элементы списка, не имеющие повторений. 
Сформировать итоговый массив чисел, соответствующих требованию. Элементы вывести в порядке их следования в исходном списке. 
Для выполнения задания обязательно использовать генератор.
Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
Результат: [23, 1, 3, 10, 4, 11]
'''

import random
my_list = [random.randint(5, 20) for el in range(1, 15)]
new_list = []
for i in range(0, len(my_list)):
    if my_list[i] not in new_list:
        new_list.append(my_list[i])
print(f"Исходый список: {my_list}")
print(f"Результат не повторяющиеся значения: {new_list}")

'''
5. Реализовать формирование списка, используя функцию range() и возможности генератора. 
В список должны войти четные числа от 100 до 1000 (включая границы). Необходимо получить результат вычисления произведения всех элементов списка.
Подсказка: использовать функцию reduce().
'''

import random
from functools import reduce
def my_func(prev_el, el):
    return prev_el * el
my_list = [random.randrange(100, 1001,2) for el in range(1, 5)]
#решение, где все четные числа от 100 до 1000 имеет слишком большой вывод.
print(f"Исходый список: {my_list}")
print(f"Результат произведения: {reduce(my_func, my_list)}")

'''
6. Реализовать два небольших скрипта:
а) итератор, генерирующий целые числа, начиная с указанного,
б) итератор, повторяющий элементы некоторого списка, определенного заранее.

Подсказка: использовать функцию count() и cycle() модуля itertools. 
Обратите внимание, что создаваемый цикл не должен быть бесконечным. Необходимо предусмотреть условие его завершения.

Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл. 
Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.
'''

from itertools import count
a = int(input("Введите первое значение: "))
b = int(input("Введите последнее значение: "))
for el in count(a):
    if el > b:
        break
    else:
        print(el)


from itertools import cycle

progr_lang = ["python", "java", "perl", "javascript"]
iter = cycle(progr_lang)
c = 0
count_el = int(input("Введите количество строк: "))
for i in cycle(progr_lang):
    if c >= count_el:
        break
    else:
        print(next(iter))
        c += 1


'''
7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. 
При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом: for el in fact(n). 
Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

Важно! '''

from math import factorial
def fact(n):
    for i in range(1, n+1):
        yield factorial(i)

a = 1
for el in fact(int(input("Введите конечное число n, до которого выводятся факториалы: "))):
    print(f"{a}! = {el}")
    a+=1

